[{"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js":"1","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js":"2","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js":"3","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js":"4","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js":"5","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js":"6","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js":"7","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js":"8","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js":"9","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js":"10","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js":"11","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js":"12","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js":"13","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js":"14","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js":"15","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js":"16","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js":"17","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js":"18","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js":"19","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRoute.js":"20","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\UnprotectedRoute.js":"21","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRouteAdmin.js":"22"},{"size":467,"mtime":1611520197207,"results":"23","hashOfConfig":"24"},{"size":4174,"mtime":1611832351435,"results":"25","hashOfConfig":"24"},{"size":75,"mtime":1611520197206,"results":"26","hashOfConfig":"24"},{"size":868,"mtime":1611832351473,"results":"27","hashOfConfig":"24"},{"size":1212,"mtime":1611832351462,"results":"28","hashOfConfig":"24"},{"size":6942,"mtime":1611520197168,"results":"29","hashOfConfig":"24"},{"size":1169,"mtime":1611832351456,"results":"30","hashOfConfig":"24"},{"size":4908,"mtime":1611832351482,"results":"31","hashOfConfig":"24"},{"size":4701,"mtime":1611832351480,"results":"32","hashOfConfig":"24"},{"size":3454,"mtime":1611832351477,"results":"33","hashOfConfig":"24"},{"size":4864,"mtime":1611833213207,"results":"34","hashOfConfig":"24"},{"size":6140,"mtime":1611839809036,"results":"35","hashOfConfig":"24"},{"size":10344,"mtime":1611796039400,"results":"36","hashOfConfig":"24"},{"size":3121,"mtime":1611743235159,"results":"37","hashOfConfig":"24"},{"size":9856,"mtime":1611832351557,"results":"38","hashOfConfig":"24"},{"size":5685,"mtime":1611832351446,"results":"39","hashOfConfig":"24"},{"size":11686,"mtime":1611832351451,"results":"40","hashOfConfig":"24"},{"size":2440,"mtime":1611832351440,"results":"41","hashOfConfig":"24"},{"size":322,"mtime":1611520197203,"results":"42","hashOfConfig":"24"},{"size":479,"mtime":1611837107322,"results":"43","hashOfConfig":"24"},{"size":445,"mtime":1611785147356,"results":"44","hashOfConfig":"24"},{"size":479,"mtime":1611837107361,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ulu4iz",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js",[],["98","99"],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js",["100"],"import React, {useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport qrcode from \"qrcode\";\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\n\r\nexport default function Overview() {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n        const [balanceGBP] = useState(user.accountBalanceGBP.data);\r\n        const [balanceUSD] = useState(user.accountBalanceUSD.data);\r\n        const [balanceEUR] = useState(user.accountBalanceEUR.data);\r\n        const [qrCodeImg, setQrCodeImg] = useState();\r\n\r\n        //Converts totpSecret into a string to display the qr code so it can be scanned with google auth (if user logged in)\r\n        if(\r\n    !qrCodeImg && user\r\n)\r\n    {\r\n        let totpSecret = user.totpSecret;\r\n        qrcode.toDataURL(totpSecret.otpauth_url, function (err, data) {\r\n            setQrCodeImg(data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar/>\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box-left\">\r\n                    <h1>Information</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 20, paddingTop: 10, paddingBottom: 15}}>\r\n                        Welcome, {user.firstName.data} {user.lastName.data}!</p>\r\n                    <p style={{color: \"black\", fontSize: 16, paddingLeft: 25, paddingRight: 25, paddingBottom: 5}}>\r\n                        Please, scan this QR code with Google Authenticator app on your smartphone to protect\r\n                        your account with 2 Factor Authentication.</p>\r\n                    <p style={{color: \"#FF5454\", fontSize: 14, paddingLeft: 30, paddingRight: 25}}>\r\n                        You will not be able to login without it!\r\n                    </p>\r\n                    <div style={{paddingLeft: 120}}>\r\n                        <img style={{height: 300}} src={qrCodeImg} alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"small-bank-box-right\">\r\n                    <h1>Account Balance</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 15, paddingBottom: 10}}>\r\n                        Your total GBP balance: £{Number(balanceGBP).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total USD balance: ${Number(balanceUSD).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total EUR balance: €{Number(balanceEUR).toFixed(2)}</p>\r\n                    <h1 style={{paddingTop: 25}}>Your Most Recent Transactions</h1>\r\n                    <div className=\"table\">\r\n                        <TableContainer component={Paper}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"font-headings\">Date</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount In</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount Out</TableCell>\r\n                                        <TableCell className=\"font-headings\">Account</TableCell>\r\n                                        <TableCell className=\"font-headings\">Balance</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {user.transactions.reverse().slice(0, 6).map((transaction) => (\r\n                                        <TableRow key={transaction.date}>\r\n                                            <TableCell component=\"th\" scope=\"row\" className=\"font-information\">\r\n                                                {transaction.date}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountIn}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountOut}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.account}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.balance}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js",["101"],"import React, {useEffect, useState} from \"react\";\r\nimport {MenuItem, Select} from \"@material-ui/core\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\"\r\nimport Axios from \"axios\";\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport { MainNavigationBar } from \"../../\";\r\n\r\nexport default function Account () {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    const [amountTransfer, setAmountTransfer] = useState();\r\n    const [amountConvert, setAmountConvert] = useState();\r\n    const [errorTransfer, setErrorTransfer] = useState();\r\n    const [showTransfer, setShowTransfer] = useState(false);\r\n    const [errorConvert, setErrorConvert] = useState();\r\n    const [showConvert, setShowConvert] = useState(false);\r\n    const [balanceGBP, setBalanceGBP] = useState(user.accountBalanceGBP.data);\r\n    const [balanceUSD, setBalanceUSD] = useState(user.accountBalanceUSD.data);\r\n    const [balanceEUR, setBalanceEUR] = useState(user.accountBalanceEUR.data);\r\n    const [recipient, setRecipient] = useState({label: '', value: ''});\r\n    const [currency, setCurrency] = useState('£');\r\n    const [currencyTo, setCurrencyTo] = useState('£');\r\n    const [currencyFrom, setCurrencyFrom] = useState('£');\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setBalanceGBP(user.accountBalanceGBP.data)\r\n            setBalanceUSD(user.accountBalanceUSD.data)\r\n            setBalanceEUR(user.accountBalanceEUR.data)\r\n            setShowTransfer(false)\r\n            setShowConvert(false)\r\n            setErrorTransfer(undefined)\r\n            setErrorConvert(undefined)\r\n            setRecipient({label: '', value: ''})\r\n            setAmountTransfer('')\r\n            setAmountConvert('')\r\n            setCurrency('£')\r\n            setCurrencyTo('£')\r\n            setCurrencyFrom('£')\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorTransfer(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    const recipientChange = (input) => {\r\n        setRecipient(input)\r\n    }\r\n    const currencyChange = (input) => {\r\n        setCurrency(input.target.value)\r\n    }\r\n    const currencyFromChange = (input) => {\r\n        setCurrencyFrom(input.target.value)\r\n    }\r\n    const currencyToChange = (input) => {\r\n        setCurrencyTo(input.target.value)\r\n    }\r\n\r\n    async function submitTransfer(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const data = {payerID: user.personalID, payeeID: recipient, amount: amountTransfer, currency}\r\n            await Axios.post(\"http://localhost:5000/users/transfer\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            console.log(err)\r\n            err.response.data.msg && setErrorTransfer(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function submitConvert(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const data = {personalID: user.personalID, amount: amountConvert, to: currencyTo, from: currencyFrom}\r\n            await Axios.post(\"http://localhost:5000/users/convert\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            console.log(err)\r\n            err.response.data.msg && setErrorConvert(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar/>\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Account Balance</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 15, paddingBottom: 10}}>\r\n                        Your total GBP balance: £{Number(balanceGBP).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total USD balance: ${Number(balanceUSD).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total EUR balance: €{Number(balanceEUR).toFixed(2)}</p>\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 40, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() => {\r\n                            setShowTransfer(!showTransfer)\r\n                        }}>New Transfer</btn>\r\n                    </div>\r\n                    {showTransfer && (\r\n                        <form className=\"form-account\" onSubmit={submitTransfer}>\r\n                            <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                                {errorTransfer && (<ErrorNotice message={errorTransfer}\r\n                                                                clearError={() => setErrorTransfer(undefined)}/>)}\r\n                            </div>\r\n                            <label>Payee Personal ID: </label>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <div style={{fontSize: 16, paddingBottom: 10}}>\r\n                                    <CreatableSelect\r\n                                        options={user.recipients}\r\n                                        onChange={recipientChange}\r\n                                    />\r\n                                </div>\r\n                                <label>Amount and Currency:</label>\r\n                                <div style={{paddingTop: 5}}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"Amount\"\r\n                                        style={{width: 200, height: 25, fontSize: 16}}\r\n                                        onChange={(e) => setAmountTransfer(e.target.value)}\r\n                                    />\r\n                                    <Select\r\n                                        defaultValue={'£'}\r\n                                        onChange={currencyChange}\r\n                                        style={{fontSize: 14}}\r\n                                    >\r\n                                        <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                        <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                        <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                    </Select>\r\n                                    <div style={{paddingTop: 10}}>\r\n                                        <input className=\"button-account\" style={{width: 110, fontSize: 12}} type=\"submit\" value=\"Submit\"/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>)}\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 30, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() => {\r\n                            setShowConvert(!showConvert)\r\n                        }}>Convert Currencies</btn>\r\n                    </div>\r\n                    {showConvert && (\r\n                        <form className=\"form-account\" onSubmit={submitConvert}>\r\n                            <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                                {errorConvert && (<ErrorNotice message={errorConvert}\r\n                                                               clearError={() => setErrorConvert(undefined)}/>)}\r\n                            </div>\r\n                            <div>\r\n                                <label>Currency From: </label>\r\n                                <Select\r\n                                    defaultValue={'£'}\r\n                                    onChange={currencyFromChange}\r\n                                    style={{fontSize: 14}}\r\n                                >\r\n                                    <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <label>Currency To: </label>\r\n                                <Select\r\n                                    defaultValue={'£'}\r\n                                    onChange={currencyToChange}\r\n                                    style={{fontSize: 14}}\r\n                                >\r\n                                    <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <label>Amount:  </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"Amount\"\r\n                                    style={{width: 200, height: 25, fontSize: 16}}\r\n                                    onChange={(e) => setAmountConvert(e.target.value)}\r\n                                />\r\n                                <div style={{paddingTop: 10}}>\r\n                                    <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                           type=\"submit\" value=\"Submit\"/>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    )\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js",["102"],"import React, {useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\n\r\nexport default function Transactions () {\r\n    const [showStatement, setShowStatement] = useState(false)\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setShowStatement(false)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"main-background\">\r\n            <MainNavigationBar />\r\n            <section className=\"main-background\">\r\n                <div className=\"centered-text-default\">\r\n                    <h1>Transactions</h1>\r\n                    <div>\r\n                    <Button variant={\"contained\"} disableElevation={true} onClick={() => {\r\n                        setShowStatement(!showStatement)\r\n                    }}>Show Statement</Button>\r\n                </div>\r\n                    {showStatement &&\r\n                    <TableContainer component={Paper}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Date</TableCell>\r\n                                    <TableCell>Amount In</TableCell>\r\n                                    <TableCell>Amount Out</TableCell>\r\n                                    <TableCell>Account</TableCell>\r\n                                    <TableCell>Balance</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {user.transactions.map((transaction) => (\r\n                                    <TableRow key={transaction.date}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {transaction.date}\r\n                                        </TableCell>\r\n                                        <TableCell>{transaction.amountIn}</TableCell>\r\n                                        <TableCell>{transaction.amountOut}</TableCell>\r\n                                        <TableCell>{transaction.account}</TableCell>\r\n                                        <TableCell>{transaction.balance}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js",["103","104","105","106"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\n\r\nexport default function Settings () {\r\n    const history = useHistory();\r\n    const {setUserData} = useContext(UserContext);\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    const [showAmend, setShowAmend] = useState(false)\r\n    const [errorAmend, setErrorAmend] = useState();\r\n    const [email, setEmail] = useState(user.email.data);\r\n    const [firstName, setFirstName] = useState(user.firstName.data);\r\n    const [lastName, setLastName] = useState(user.lastName.data);\r\n    const [passwordOld, setPasswordOld] = useState(undefined);\r\n    const [passwordNew, setPasswordNew] = useState(undefined);\r\n    const [passwordCheck, setPasswordCheck] = useState(undefined);\r\n    const [phoneNum, setPhoneNum] = useState(user.phoneNum.data);\r\n    // This removes the authentication token from the user data and also the local storage when the user logs out\r\n    const logout = () => {\r\n        setUserData({\r\n            token: undefined,\r\n            user: undefined\r\n        })\r\n        localStorage.setItem(\"auth-token\", \"\")\r\n    }\r\n    //This deletes the user account\r\n    async function handleDeleteAccount() {\r\n        try {\r\n                //Gets auth token from local storage and saves to a variable\r\n                const token = localStorage.getItem('auth-token');\r\n                const request = Axios.create({\r\n                    headers: {\r\n                        \"x-auth-token\": token\r\n                    }\r\n                });\r\n                //Logs user out before account is deleted\r\n                logout();\r\n                //Sends request to delete account to server-side using axios\r\n                await request.delete('http://localhost:5000/users/delete').then(r =>\r\n                    history.push('/')\r\n                )\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setShowAmend(false)\r\n            setEmail(user.email.data)\r\n            setFirstName(user.firstName.data)\r\n            setLastName(user.lastName.data)\r\n            setPasswordOld(undefined)\r\n            setPasswordNew(undefined)\r\n            setPasswordCheck(undefined)\r\n            setPhoneNum(user.phoneNum.data)\r\n            let accountBalanceGBP = undefined;\r\n            let accountBalanceEUR = undefined;\r\n            let accountBalanceUSD = undefined;\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitAmend(e){\r\n        e.preventDefault()\r\n        try {\r\n            const data = {email, passwordOld, passwordNew, passwordCheck, phoneNum, firstName, lastName, personalID: user.personalID}\r\n            await Axios.post(\"http://localhost:5000/users/amendDetails\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Settings</h1>\r\n                    <div>\r\n                        <p style={{fontSize: 18, color: \"black\", paddingLeft: 20, paddingTop: 25, paddingBottom: 15}}>\r\n                            Your Account Details:</p>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>User ID: {user.personalID}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>First Name: {user.firstName.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Last Name: {user.lastName.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Telephone Number: {user.phoneNum.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Email: {user.email.data}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 30, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() => {\r\n                            setShowAmend(!showAmend)\r\n                        }}>Amend Details</btn>\r\n                    </div>\r\n                    {showAmend &&\r\n                    <form className=\"form-account\" onSubmit={submitAmend}>\r\n                        <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                            {errorAmend && (<ErrorNotice message={errorAmend}\r\n                                                            clearError={() => setErrorAmend(undefined)}/>)}\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-first-name\"\r\n                                type=\"text\"\r\n                                placeholder=\"First Name\"\r\n                                defaultValue={user.firstName.data}\r\n                                onChange={(e) => setFirstName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-last-name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Last Name\"\r\n                                defaultValue={user.lastName.data}\r\n                                onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-phone-num\"\r\n                                type=\"tel\"\r\n                                placeholder=\"Telephone Number\"\r\n                                defaultValue={user.phoneNum.data}\r\n                                onChange={(e) => setPhoneNum(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Email Address\"\r\n                                defaultValue={user.email.data}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"passwordNew\"\r\n                                type=\"password\"\r\n                                placeholder=\"New Password\"\r\n                                onChange={(e) => setPasswordNew(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"password\"\r\n                                placeholder=\"Verify Your New Password\"\r\n                                onChange={(e) => setPasswordCheck(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"passwordOld\"\r\n                                type=\"password\"\r\n                                placeholder=\"Current Password\"\r\n                                onChange={(e) => setPasswordOld(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                   type=\"submit\" value=\"Amend\"/>\r\n                        </div>\r\n                    </form>}\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 20, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() =>\r\n                        { if (window.confirm('Are you sure you wish to delete the account?')) handleDeleteAccount() } }>\r\n                            Click here to delete account</btn>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js",["107","108"],"import React, {useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport Axios from \"axios\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function NewAdmin () {\r\n    const [email, setEmail] = useState(undefined);\r\n    const [firstName, setFirstName] = useState(undefined);\r\n    const [lastName, setLastName] = useState(undefined);\r\n    const [password, setPassword] = useState(undefined);\r\n    const [passwordCheck, setPasswordCheck] = useState(undefined);\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    const [phoneNum, setPhoneNum] = useState(undefined);\r\n    const role = \"admin\";\r\n    const [error, setError] = useState();\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const newUser = { email, firstName, lastName, password, passwordCheck, personalID, phoneNum, role };\r\n            await Axios.post(\"http://localhost:5000/users/register\", newUser)\r\n            alert(\"Admin account with personal id \" + personalID + \" successfully created\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 10}}>\r\n                        {error && (\r\n                            <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                        )}\r\n                    </div>\r\n                    <form onSubmit={submit}>\r\n                        <label htmlFor=\"register-first-name\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"First Name(s)\" id=\"register-first-name\"\r\n                                   onChange={(e) => setFirstName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-last-name\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"Last Name\" id=\"register-last-name\"\r\n                                   onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-phone-num\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"tel\" placeholder=\"Telephone Number\" id=\"register-phone-num\"\r\n                                   onChange={(e) => setPhoneNum(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-email\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"email\" placeholder=\"Email Address\" id=\"register-email\"\r\n                                   onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-personal-id\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"User ID\" id=\"register-password\"\r\n                                   onChange={(e) => setPersonalID(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-password\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"password\" placeholder=\"Password\" id=\"register-password\"\r\n                                   onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"password\" placeholder=\"Repeat Password\"\r\n                                   onChange={(e) => setPasswordCheck(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"inputBox\">\r\n                            <input className=\"button\" type=\"submit\" value=\"Register\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js",["109","110","111"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\n\r\nexport default function Users () {\r\n    const {userData, setUserData} = useContext(UserContext);\r\n    let userDataToAmend = \"\";\r\n    //Sets user data to the logged in admin user if it is null to prevent null pointer errors\r\n    if (!userDataToAmend) {\r\n        userDataToAmend = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n    }\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    const [showAmend, setShowAmend] = useState(false);\r\n    const [errorAmend, setErrorAmend] = useState();\r\n    const [email, setEmail] = useState(userDataToAmend.email.data);\r\n    const [firstName, setFirstName] = useState(userDataToAmend.firstName.data);\r\n    const [lastName, setLastName] = useState(userDataToAmend.lastName.data);\r\n    const [phoneNum, setPhoneNum] = useState(userDataToAmend.phoneNum.data);\r\n    const [accountBalanceGBP, setBalanceGBP] = useState(userDataToAmend.accountBalanceGBP.data);\r\n    const [accountBalanceUSD, setBalanceUSD] = useState(userDataToAmend.accountBalanceUSD.data);\r\n    const [accountBalanceEUR, setBalanceEUR] = useState(userDataToAmend.accountBalanceEUR.data);\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = newData.data\r\n            setShowAmend(false)\r\n            setEmail(userDataToAmend.email.data)\r\n            setFirstName(userDataToAmend.firstName.data)\r\n            setLastName(userDataToAmend.lastName.data)\r\n            setPhoneNum(userDataToAmend.phoneNum.data)\r\n            setBalanceGBP(userDataToAmend.accountBalanceGBP.data)\r\n            setBalanceUSD(userDataToAmend.accountBalanceUSD.data)\r\n            setBalanceEUR(userDataToAmend.accountBalanceEUR.data)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(userDataToAmend))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function getUserData() {\r\n        try {\r\n            const userData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = userData.data\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(userDataToAmend))\r\n            setShowAmend(!showAmend)\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitAmend(e){\r\n        e.preventDefault()\r\n        try {\r\n            const data = {email, phoneNum, firstName, lastName, personalID, accountBalanceGBP, accountBalanceUSD,\r\n                accountBalanceEUR}\r\n            await Axios.post(\"http://localhost:5000/users/amendDetails\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"big-bank-box\">\r\n                    <h1>Users</h1>\r\n                    <label htmlFor=\"personal-id\">Personal ID</label>\r\n                    <input\r\n                        id=\"personal-id\"\r\n                        type=\"text\"\r\n                        placeholder=\"e.g 12345678912\"\r\n                        onChange={(e) => setPersonalID(e.target.value)}\r\n                    />\r\n                    <Button variant={\"contained\"} disableElevation={true} onClick={getUserData} >Amend Details</Button>\r\n                {showAmend &&\r\n                <form className=\"form\" onSubmit={submitAmend}>\r\n                    {errorAmend && (<ErrorNotice message={errorAmend} clearError={() => setErrorAmend(undefined)}/>)}\r\n                    <label htmlFor=\"register-email\">Email</label>\r\n                    <input\r\n                        id=\"register-email\"\r\n                        type=\"email\"\r\n                        defaultValue={userDataToAmend.email.data}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-first-na   me\">First name</label>\r\n                    <input\r\n                        id=\"register-first-name\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.firstName.data}\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-last-name\">Last name</label>\r\n                    <input\r\n                        id=\"register-last-name\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.lastName.data}\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-phone-num\">Phone Num</label>\r\n                    <input\r\n                        id=\"register-phone-num\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.phoneNum.data}\r\n                        onChange={(e) => setPhoneNum(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"gbp-balance\">GBP Balance</label>\r\n                    <input\r\n                        id=\"gbp-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceGBP.data}\r\n                        onChange={(e) => setBalanceGBP(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"usd-balance\">USD Balance</label>\r\n                    <input\r\n                        id=\"usd-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceUSD.data}\r\n                        onChange={(e) => setBalanceUSD(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"eur-balance\">EUR Balance</label>\r\n                    <input\r\n                        id=\"eur-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceEUR.data}\r\n                        onChange={(e) => setBalanceEUR(e.target.value)}\r\n                    />\r\n                    <input type=\"submit\" value=\"Amend\"/>\r\n                </form>}\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js",["112"],"import React, {useContext} from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport LogoutLogo from \"../images/logout-logo.png\";\r\nimport BankLogo from \"../images/bank-logo.png\";\r\nimport UsersLogo from \"../images/multiple-users-logo.png\";\r\nimport AdminLogo from \"../images/admin-logo.png\";\r\nimport UserContext from \"../../context/UserContext\";\r\n\r\nfunction NavigationBar(){\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n\r\n    const {setUserData} = useContext(UserContext);\r\n\r\n    // This removes the authentication token from the user data and also the local storage when the user logs out\r\n    const logout = () => {\r\n        setUserData({\r\n            token: undefined,\r\n            user: undefined\r\n        })\r\n        sessionStorage.clear()\r\n        localStorage.clear()\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <div className=\"sidebar\">\r\n                <div className=\"nav-brand\">\r\n                    <Link to=\"/users\">\r\n                        <img className=\"main-img\" src={BankLogo} alt=\"\"/>\r\n                    </Link>\r\n                </div>\r\n                <ul className=\"sidebar-list\">\r\n                    <li className=\"row\">\r\n                        <Link className=\"link\" to=\"/users\">\r\n                            <img className=\"img\" src={UsersLogo} alt=\"\"/>\r\n                            <p>Users</p>\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"row\">\r\n                        <Link className=\"link\" to=\"/create_admin\">\r\n                            <img className=\"img\" src={AdminLogo} alt=\"\"/>\r\n                            <p>New Admin</p>\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"text\">\r\n                    {/*<h2 className=\"admin\">Admin ID: {user.personalID}</h2>*/}\r\n                </div>\r\n            </div>\r\n            <div className=\"button\">\r\n                <Link to=\"/login\" onClick={logout}>\r\n                    <img className=\"image-logout\" src={LogoutLogo} alt=\"Logout\"/>\r\n                    <p style={{color: \"#ff1b1b\" }}>Logout</p>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavigationBar);","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRoute.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\UnprotectedRoute.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRouteAdmin.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":13},{"ruleId":"121","severity":1,"message":"122","line":49,"column":8,"nodeType":"123","endLine":49,"endColumn":10,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"122","line":22,"column":8,"nodeType":"123","endLine":22,"endColumn":10,"suggestions":"125"},{"ruleId":"117","severity":1,"message":"126","line":62,"column":17,"nodeType":"119","messageId":"120","endLine":62,"endColumn":34},{"ruleId":"117","severity":1,"message":"127","line":63,"column":17,"nodeType":"119","messageId":"120","endLine":63,"endColumn":34},{"ruleId":"117","severity":1,"message":"128","line":64,"column":17,"nodeType":"119","messageId":"120","endLine":64,"endColumn":34},{"ruleId":"121","severity":1,"message":"122","line":73,"column":8,"nodeType":"123","endLine":73,"endColumn":10,"suggestions":"129"},{"ruleId":"117","severity":1,"message":"130","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":19},{"ruleId":"117","severity":1,"message":"131","line":6,"column":9,"nodeType":"119","messageId":"120","endLine":6,"endColumn":19},{"ruleId":"117","severity":1,"message":"132","line":9,"column":12,"nodeType":"119","messageId":"120","endLine":9,"endColumn":20},{"ruleId":"117","severity":1,"message":"133","line":9,"column":22,"nodeType":"119","messageId":"120","endLine":9,"endColumn":33},{"ruleId":"121","severity":1,"message":"122","line":56,"column":8,"nodeType":"123","endLine":56,"endColumn":10,"suggestions":"134"},{"ruleId":"117","severity":1,"message":"135","line":11,"column":9,"nodeType":"119","messageId":"120","endLine":11,"endColumn":13},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'Axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.","ArrayExpression",["138"],["139"],"'accountBalanceGBP' is assigned a value but never used.","'accountBalanceEUR' is assigned a value but never used.","'accountBalanceUSD' is assigned a value but never used.",["140"],"'UserContext' is defined but never used.","'useHistory' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.",["141"],"'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"142","fix":"144"},{"desc":"142","fix":"145"},{"desc":"142","fix":"146"},"Update the dependencies array to be: [updateData]",{"range":"147","text":"148"},{"range":"149","text":"148"},{"range":"150","text":"148"},{"range":"151","text":"148"},[2202,2204],"[updateData]",[813,815],[3046,3048],[2748,2750]]