[{"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js":"1","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js":"2","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js":"3","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js":"4","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js":"5","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js":"6","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js":"7","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js":"8","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js":"9","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js":"10","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js":"11","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js":"12","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js":"13","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js":"14","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js":"15","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js":"16","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js":"17","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js":"18","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js":"19"},{"size":250,"mtime":1611859464659,"results":"20","hashOfConfig":"21"},{"size":2882,"mtime":1611881016986,"results":"22","hashOfConfig":"21"},{"size":75,"mtime":1611520197206,"results":"23","hashOfConfig":"21"},{"size":868,"mtime":1611832351473,"results":"24","hashOfConfig":"21"},{"size":1212,"mtime":1611832351462,"results":"25","hashOfConfig":"21"},{"size":5166,"mtime":1611873382501,"results":"26","hashOfConfig":"21"},{"size":1181,"mtime":1611859464647,"results":"27","hashOfConfig":"21"},{"size":6137,"mtime":1611870120279,"results":"28","hashOfConfig":"21"},{"size":6073,"mtime":1611870120277,"results":"29","hashOfConfig":"21"},{"size":3454,"mtime":1611859464649,"results":"30","hashOfConfig":"21"},{"size":4872,"mtime":1611873393571,"results":"31","hashOfConfig":"21"},{"size":6094,"mtime":1611873393589,"results":"32","hashOfConfig":"21"},{"size":11891,"mtime":1611881806766,"results":"33","hashOfConfig":"21"},{"size":4291,"mtime":1611870120284,"results":"34","hashOfConfig":"21"},{"size":10847,"mtime":1611870120282,"results":"35","hashOfConfig":"21"},{"size":6760,"mtime":1611870120268,"results":"36","hashOfConfig":"21"},{"size":14512,"mtime":1611879783084,"results":"37","hashOfConfig":"21"},{"size":2724,"mtime":1611870120266,"results":"38","hashOfConfig":"21"},{"size":322,"mtime":1611520197203,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ulu4iz",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js",[],["85","86"],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js",["87"],"import React, {useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport qrcode from \"qrcode\";\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nexport default function Overview() {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n    const history = useHistory();\r\n    if (user == null || user.role !== \"user\") {\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n    async function checkLoggedIn() {\r\n        try {\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n    }, []);\r\n\r\n    const [balanceGBP] = useState(user.accountBalanceGBP.data);\r\n    const [balanceUSD] = useState(user.accountBalanceUSD.data);\r\n    const [balanceEUR] = useState(user.accountBalanceEUR.data);\r\n    const [qrCodeImg, setQrCodeImg] = useState();\r\n\r\n        //Converts totpSecret into a string to display the qr code so it can be scanned with google auth (if user logged in)\r\n        if(\r\n    !qrCodeImg && user\r\n)\r\n    {\r\n        let totpSecret = user.totpSecret;\r\n        qrcode.toDataURL(totpSecret.otpauth_url, function (err, data) {\r\n            setQrCodeImg(data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar/>\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box-left\">\r\n                    <h1>Information</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 20, paddingTop: 10, paddingBottom: 15}}>\r\n                        Welcome, {user.firstName.data} {user.lastName.data}!</p>\r\n                    <p style={{color: \"black\", fontSize: 16, paddingLeft: 25, paddingRight: 25, paddingBottom: 5}}>\r\n                        Please, scan this QR code with Google Authenticator app on your smartphone to protect\r\n                        your account with 2 Factor Authentication.</p>\r\n                    <p style={{color: \"#FF5454\", fontSize: 14, paddingLeft: 30, paddingRight: 25}}>\r\n                        You will not be able to login without it!\r\n                    </p>\r\n                    <div style={{paddingLeft: 120}}>\r\n                        <img style={{height: 300}} src={qrCodeImg} alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"small-bank-box-right\">\r\n                    <h1>Account Balance</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 15, paddingBottom: 10}}>\r\n                        Your total GBP balance: £{Number(balanceGBP).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total USD balance: ${Number(balanceUSD).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total EUR balance: €{Number(balanceEUR).toFixed(2)}</p>\r\n                    <h1 style={{paddingTop: 25}}>Your Most Recent Transactions</h1>\r\n                    <div className=\"table\">\r\n                        <TableContainer component={Paper}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"font-headings\">Date</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount In</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount Out</TableCell>\r\n                                        <TableCell className=\"font-headings\">Account</TableCell>\r\n                                        <TableCell className=\"font-headings\">Balance</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {user.transactions.reverse().slice(0, 6).map((transaction) => (\r\n                                        <TableRow key={transaction.date}>\r\n                                            <TableCell component=\"th\" scope=\"row\" className=\"font-information\">\r\n                                                {transaction.date}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountIn}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountOut}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.account}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.balance}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js",["88"],"import React, {useEffect, useState} from \"react\";\r\nimport {MainNavigationBar} from \"../../\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\nimport Axios from \"axios\";\r\nimport CardTemplate from \"../../images/bank-card-template.png\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function Cards () {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    const history = useHistory();\r\n    if (user == null || user.role !== \"user\") {\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n    const [cardNumber, setCardNumber] = useState(user.cardNumber.data)\r\n    const [CVV, setCVV] = useState(user.CVV.data)\r\n    const [frozen, setFrozen] = useState(user.frozenCard)\r\n    const [errorCards, setErrorCards] = useState();\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setCardNumber(user.cardNumber.data)\r\n            setCVV(user.CVV.data)\r\n            setFrozen(user.frozenCard)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorCards(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function checkLoggedIn() {\r\n        try {\r\n            if (user.role !== 'user'){\r\n                return false\r\n            }\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n            //err.response.data.msg\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitCards(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const data = {cardNumber, CVV, frozen, PID: user.personalID}\r\n            await Axios.post(\"http://localhost:5000/users/newVirtualCard\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorCards(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    function randomNum(){\r\n        return String(Math.floor(Math.random() * 10))\r\n    }\r\n\r\n    function generateNumbers(){\r\n        setCardNumber(randomNum() + randomNum() + randomNum() + randomNum() + ' ' + randomNum() + randomNum() +\r\n            randomNum() + randomNum() + ' ' + randomNum() + randomNum() + randomNum() + randomNum() + ' ' + randomNum()\r\n            + randomNum() + randomNum() + randomNum())\r\n        setCVV(randomNum() + randomNum() + randomNum())\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Virtual Cards</h1>\r\n                    <div>\r\n                        <div style={{paddingBottom: 20, paddingTop: 20, paddingLeft: 30}}>\r\n                            <button className=\"button-account\" style={{width: 220, fontSize: 16, height: 40}}\r\n                                 onClick={() => {generateNumbers()}}>Generate New Card</button>\r\n                        </div>\r\n                        <form className=\"form-account\" onSubmit = {submitCards}>\r\n                            {errorCards && (<ErrorNotice message={errorCards} clearError={() => setErrorCards(undefined)}/>)}\r\n                            <label>Card Number: </label>\r\n                            <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"Card Number\"\r\n                                    readOnly={true}\r\n                                    value ={cardNumber}\r\n                                />\r\n                            </div>\r\n\r\n                            <label>CVV: </label>\r\n                            <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"CVV\"\r\n                                    value = {CVV}\r\n                                    readOnly={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div style={{paddingTop: 5, paddingLeft: 10}}>\r\n                                <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                       type=\"submit\" value=\"Save\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <div>\r\n                        <img src={CardTemplate} style={{width: 560}} alt=\"\"/>\r\n                        <p style={{color: \"white\", fontSize: 40, position: \"relative\", bottom: 180, left: 60}}>\r\n                            {user.cardNumber.data}</p>\r\n                        <p style={{color: \"#fafafa\", fontSize: 20, position: \"relative\", bottom: 179, left: 75}}>\r\n                            {user.CVV.data}</p>\r\n                        <p style={{color: \"white\", fontSize: 40, position: \"absolute\", bottom: 78, left: 65}}>\r\n                            {user.firstName.data} {user.lastName.data}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js",["89"],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js",["90"],"import React, {useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function Transactions () {\r\n    const [setShowStatement] = useState(false)\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    const history = useHistory();\r\n    if (user == null || user.role !== \"user\") {\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setShowStatement(false)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    async function checkLoggedIn() {\r\n        try {\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n        updateData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"big-bank-box\">\r\n                    <h1>Transaction History</h1>\r\n                    <div className=\"table\" style={{paddingBottom: 30}}>\r\n                        <TableContainer component={Paper}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"font-headings\">Date</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount In</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount Out</TableCell>\r\n                                        <TableCell className=\"font-headings\">Account</TableCell>\r\n                                        <TableCell className=\"font-headings\">Balance</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {user.transactions.reverse().map((transaction) => (\r\n                                        <TableRow key={transaction.date}>\r\n                                            <TableCell component=\"th\" scope=\"row\" className=\"font-information\">\r\n                                                {transaction.date}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountIn}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountOut}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.account}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.balance}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js",["91"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\n\r\nexport default function Settings () {\r\n    const history = useHistory();\r\n    const {setUserData} = useContext(UserContext);\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    if (user == null || user.role !== \"user\") {\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n    const [showAmend, setShowAmend] = useState(false)\r\n    const [errorAmend, setErrorAmend] = useState();\r\n    const [email, setEmail] = useState(user.email.data);\r\n    const [firstName, setFirstName] = useState(user.firstName.data);\r\n    const [lastName, setLastName] = useState(user.lastName.data);\r\n    const [passwordOld, setPasswordOld] = useState(undefined);\r\n    const [passwordNew, setPasswordNew] = useState(undefined);\r\n    const [passwordCheck, setPasswordCheck] = useState(undefined);\r\n    const [phoneNum, setPhoneNum] = useState(user.phoneNum.data);\r\n    // This removes the authentication token from the user data and also the local storage when the user logs out\r\n    const logout = () => {\r\n        setUserData({\r\n            token: undefined,\r\n            user: undefined\r\n        })\r\n        sessionStorage.clear()\r\n    }\r\n    //This deletes the user account\r\n    async function handleDeleteAccount() {\r\n        try {\r\n                //Gets auth token from local storage and saves to a variable\r\n                const token = sessionStorage.getItem('auth-token');\r\n                const request = Axios.create({\r\n                    headers: {\r\n                        \"x-auth-token\": token\r\n                    }\r\n                });\r\n                //Logs user out before account is deleted\r\n                logout();\r\n                //Sends request to delete account to server-side using axios\r\n                await request.delete('http://localhost:5000/users/delete').then(r =>\r\n                    history.push('/')\r\n                )\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setShowAmend(false)\r\n            setEmail(user.email.data)\r\n            setFirstName(user.firstName.data)\r\n            setLastName(user.lastName.data)\r\n            setPasswordOld(undefined)\r\n            setPasswordNew(undefined)\r\n            setPasswordCheck(undefined)\r\n            setPhoneNum(user.phoneNum.data)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function checkLoggedIn() {\r\n        try {\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitAmend(e){\r\n        e.preventDefault()\r\n        try {\r\n            const data = {email, passwordOld, passwordNew, passwordCheck, phoneNum, firstName, lastName, personalID: user.personalID}\r\n            await Axios.post(\"http://localhost:5000/users/amendDetails\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Settings</h1>\r\n                    <div>\r\n                        <p style={{fontSize: 18, color: \"black\", paddingLeft: 20, paddingTop: 25, paddingBottom: 15}}>\r\n                            Your Account Details:</p>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>User ID: {user.personalID}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>First Name: {user.firstName.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Last Name: {user.lastName.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Telephone Number: {user.phoneNum.data}</label>\r\n                        </div>\r\n                        <div className=\"form-account\" onSubmit={submitAmend}>\r\n                            <label>Email: {user.email.data}</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 30, paddingBottom: 20}}>\r\n                        <button className=\"button-account\" style={{width: 180, fontSize: 16}} onClick={() => {\r\n                            setShowAmend(!showAmend)\r\n                        }}>Amend Details</button>\r\n                    </div>\r\n                    {showAmend &&\r\n                    <form className=\"form-account\" onSubmit={submitAmend}>\r\n                        <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                            {errorAmend && (<ErrorNotice message={errorAmend}\r\n                                                            clearError={() => setErrorAmend(undefined)}/>)}\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-first-name\"\r\n                                type=\"text\"\r\n                                placeholder=\"First Name\"\r\n                                defaultValue={user.firstName.data}\r\n                                onChange={(e) => setFirstName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-last-name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Last Name\"\r\n                                defaultValue={user.lastName.data}\r\n                                onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-phone-num\"\r\n                                type=\"tel\"\r\n                                placeholder=\"Telephone Number\"\r\n                                defaultValue={user.phoneNum.data}\r\n                                onChange={(e) => setPhoneNum(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"register-email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Email Address\"\r\n                                defaultValue={user.email.data}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"passwordNew\"\r\n                                type=\"password\"\r\n                                placeholder=\"New Password\"\r\n                                onChange={(e) => setPasswordNew(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"password\"\r\n                                placeholder=\"Verify Your New Password\"\r\n                                onChange={(e) => setPasswordCheck(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                id=\"passwordOld\"\r\n                                type=\"password\"\r\n                                placeholder=\"Current Password\"\r\n                                onChange={(e) => setPasswordOld(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                   type=\"submit\" value=\"Amend\"/>\r\n                        </div>\r\n                    </form>}\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 20, paddingBottom: 20}}>\r\n                        <button className=\"button-account\" style={{width: 180, fontSize: 16}} onClick={() =>\r\n                        { if (window.confirm('Are you sure you wish to delete the account?')) handleDeleteAccount() } }>\r\n                            Delete Account</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js",["92"],"import React, {useEffect, useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function NewAdmin () {\r\n    const [email, setEmail] = useState(undefined);\r\n    const [firstName, setFirstName] = useState(undefined);\r\n    const [lastName, setLastName] = useState(undefined);\r\n    const [password, setPassword] = useState(undefined);\r\n    const [passwordCheck, setPasswordCheck] = useState(undefined);\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    const [phoneNum, setPhoneNum] = useState(undefined);\r\n    const role = \"admin\";\r\n    const [error, setError] = useState();\r\n    const history = useHistory();\r\n\r\n    async function checkLoggedIn() {\r\n        try {\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n    }, []);\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const newUser = { email, firstName, lastName, password, passwordCheck, personalID, phoneNum, role };\r\n            await Axios.post(\"http://localhost:5000/users/register\", newUser)\r\n            alert(\"Account with personal ID number \" + personalID + \" was successfully created!\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Create New Admin Account</h1>\r\n                    <form className=\"form-account\" onSubmit={submit}>\r\n                        <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 10, paddingTop: 10}}>\r\n                            {error && (\r\n                                <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                            )}\r\n                        </div>\r\n                        <label htmlFor=\"register-first-name\"/>\r\n                        <div>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"text\"\r\n                                placeholder=\"First Name(s)\"\r\n                                id=\"register-first-name\"\r\n                                onChange={(e) => setFirstName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-last-name\"/>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"text\"\r\n                                placeholder=\"Last Name\"\r\n                                id=\"register-last-name\"\r\n                                onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-phone-num\"/>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"tel\"\r\n                                placeholder=\"Telephone Number\"\r\n                                id=\"register-phone-num\"\r\n                                onChange={(e) => setPhoneNum(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-email\"/>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"email\"\r\n                                placeholder=\"Email Address\"\r\n                                id=\"register-email\"\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-personal-id\"/>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"text\"\r\n                                placeholder=\"User ID\"\r\n                                id=\"register-password\"\r\n                                onChange={(e) => setPersonalID(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-password\"/>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                id=\"register-password\"\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input\r\n                                className=\"input-settings\"\r\n                                type=\"password\"\r\n                                placeholder=\"Repeat Password\"\r\n                                onChange={(e) => setPasswordCheck(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div style={{paddingTop: 10}}>\r\n                            <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                   type=\"submit\" value=\"Create\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js",["93"],"import React, {useEffect, useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function Users () {\r\n    let userDataToAmend = \"\";\r\n    const userData = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    //Sets user data to the logged in admin user if it is null to prevent null pointer errors\r\n    if (!userDataToAmend) {\r\n        userDataToAmend = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n    }\r\n    const history = useHistory();\r\n    if (userData == null || userData.role !== \"admin\") {\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n    const [allUsers, setAllUsers] = useState([])\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    console.log(personalID)\r\n    const [showAmend, setShowAmend] = useState(false);\r\n    const [error, setError] = useState();\r\n    const [email, setEmail] = useState(userDataToAmend.email.data);\r\n    const [firstName, setFirstName] = useState(userDataToAmend.firstName.data);\r\n    const [lastName, setLastName] = useState(userDataToAmend.lastName.data);\r\n    const [phoneNum, setPhoneNum] = useState(userDataToAmend.phoneNum.data);\r\n    const [accountBalanceGBP, setBalanceGBP] = useState(userDataToAmend.accountBalanceGBP.data);\r\n    const [accountBalanceUSD, setBalanceUSD] = useState(userDataToAmend.accountBalanceUSD.data);\r\n    const [accountBalanceEUR, setBalanceEUR] = useState(userDataToAmend.accountBalanceEUR.data);\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newUsers = await Axios.post(\"http://localhost:5000/users/getAll\")\r\n            setAllUsers(newUsers.data)\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = newData.data\r\n            setShowAmend(false)\r\n            setEmail(userDataToAmend.email.data)\r\n            setFirstName(userDataToAmend.firstName.data)\r\n            setLastName(userDataToAmend.lastName.data)\r\n            setPhoneNum(userDataToAmend.phoneNum.data)\r\n            setBalanceGBP(userDataToAmend.accountBalanceGBP.data)\r\n            setBalanceUSD(userDataToAmend.accountBalanceUSD.data)\r\n            setBalanceEUR(userDataToAmend.accountBalanceEUR.data)\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function getUserData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = newData.data\r\n            setShowAmend(!showAmend)\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg)\r\n        }\r\n    }\r\n    async function checkLoggedIn() {\r\n        try {\r\n            const token = JSON.parse(sessionStorage.getItem(\"auth-token\"))\r\n            if (token == null){\r\n                return false\r\n            }\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            const logged = await request.post(\"http://localhost:5000/users/tokenIsValid\")\r\n            if (logged.data === false){\r\n                return false\r\n            }\r\n            return true\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    const logged = checkLoggedIn()\r\n    if (logged === false){\r\n        sessionStorage.clear()\r\n        history.push('/home')\r\n        history.go(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const logged = checkLoggedIn()\r\n        if (logged === false){\r\n            sessionStorage.clear()\r\n            history.push('/home')\r\n            history.go(0)\r\n        }\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitAmend(e){\r\n        e.preventDefault()\r\n        try {\r\n            const data = {email, phoneNum, firstName, lastName, personalID, accountBalanceGBP, accountBalanceUSD,\r\n                accountBalanceEUR}\r\n            await Axios.post(\"http://localhost:5000/users/amendDetails\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"big-bank-box\">\r\n                    <div className=\"flex-container\">\r\n                        <div style={{paddingRight: 50}}>\r\n                            <h1>Details of All Users</h1>\r\n                            <div className=\"table\">\r\n                                <TableContainer component={Paper}>\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell style={{width: 150}} className=\"font-headings\">Personal ID</TableCell>\r\n                                                <TableCell style={{width: 200}} className=\"font-headings\">First Name</TableCell>\r\n                                                <TableCell style={{width: 200}} className=\"font-headings\">Last Name</TableCell>\r\n                                                <TableCell className=\"font-headings\">GBP (£)</TableCell>\r\n                                                <TableCell className=\"font-headings\">USD ($)</TableCell>\r\n                                                <TableCell className=\"font-headings\">EUR (€)</TableCell>\r\n                                                <TableCell style={{width: 80}} className=\"font-headings\">Role</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {allUsers.map((user) => (\r\n                                                <TableRow key={user.personalID}>\r\n                                                    <TableCell component=\"th\" scope=\"row\" className=\"font-information\">\r\n                                                        {user.personalID}\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"font-information\">{user.firstName.data}</TableCell>\r\n                                                    <TableCell className=\"font-information\">{user.lastName.data}</TableCell>\r\n                                                    <TableCell className=\"font-information\" style={{textAlign: \"center\"}}>\r\n                                                        {user.accountBalanceGBP.data}</TableCell>\r\n                                                    <TableCell className=\"font-information\" style={{textAlign: \"center\"}}>\r\n                                                        {user.accountBalanceUSD.data}</TableCell>\r\n                                                    <TableCell className=\"font-information\" style={{textAlign: \"center\"}}>\r\n                                                        {user.accountBalanceEUR.data}</TableCell>\r\n                                                    <TableCell className=\"font-information\">{user.role}</TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <h1>Amend User Details</h1>\r\n                            <div className=\"form-account\" style={{paddingTop: 15}}>\r\n                                <label htmlFor=\"personal-id\">Personal ID</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"personal-id\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"e.g 12345678912\"\r\n                                        onChange={(e) => setPersonalID(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div style={{paddingTop: 5, paddingLeft: 10}}>\r\n                                    <btn className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                         disableElevation={true} onClick={getUserData} >Amend Details</btn>\r\n                                </div>\r\n                            </div>\r\n                            {showAmend &&\r\n                            <form className=\"form-account\" onSubmit={submitAmend}>\r\n                                <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 10, paddingTop: 10}}>\r\n                                    {error && (\r\n                                        <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                    )}\r\n                                </div>\r\n\r\n                                <label htmlFor=\"amend-first-name\">First Name</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"amend-first-name\"\r\n                                        type=\"text\"\r\n                                        defaultValue={userDataToAmend.firstName.data}\r\n                                        onChange={(e) => setFirstName(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"amend-last-name\">Last Name</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"amend-last-name\"\r\n                                        type=\"text\"\r\n                                        defaultValue={userDataToAmend.lastName.data}\r\n                                        onChange={(e) => setLastName(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"amend-phone-num\">Telephone Number</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"amend-phone-num\"\r\n                                        type=\"tel\"\r\n                                        defaultValue={userDataToAmend.phoneNum.data}\r\n                                        onChange={(e) => setPhoneNum(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"amend-email\">Email Address</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"amend-email\"\r\n                                        type=\"email\"\r\n                                        defaultValue={userDataToAmend.email.data}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"gbp-balance\">GBP Balance</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"gbp-balance\"\r\n                                        type=\"text\"\r\n                                        defaultValue={userDataToAmend.accountBalanceGBP.data}\r\n                                        onChange={(e) => setBalanceGBP(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"usd-balance\">USD Balance</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"usd-balance\"\r\n                                        type=\"text\"\r\n                                        defaultValue={userDataToAmend.accountBalanceUSD.data}\r\n                                        onChange={(e) => setBalanceUSD(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label htmlFor=\"eur-balance\">EUR Balance</label>\r\n                                <div style={{paddingBottom: 10, paddingTop: 3}}>\r\n                                    <input\r\n                                        className=\"input-settings\"\r\n                                        id=\"eur-balance\"\r\n                                        type=\"text\"\r\n                                        defaultValue={userDataToAmend.accountBalanceEUR.data}\r\n                                        onChange={(e) => setBalanceEUR(e.target.value)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div style={{paddingTop: 5, paddingLeft: 10}}>\r\n                                    <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                           type=\"submit\" value=\"Amend\"/>\r\n                                </div>\r\n                            </form>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":50,"column":8,"nodeType":"100","endLine":50,"endColumn":10,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":73,"column":8,"nodeType":"100","endLine":73,"endColumn":10,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"102","line":104,"column":8,"nodeType":"100","endLine":104,"endColumn":10,"suggestions":"104"},{"ruleId":"98","severity":1,"message":"105","line":63,"column":8,"nodeType":"100","endLine":63,"endColumn":10,"suggestions":"106"},{"ruleId":"98","severity":1,"message":"105","line":108,"column":8,"nodeType":"100","endLine":108,"endColumn":10,"suggestions":"107"},{"ruleId":"98","severity":1,"message":"99","line":53,"column":8,"nodeType":"100","endLine":53,"endColumn":10,"suggestions":"108"},{"ruleId":"98","severity":1,"message":"105","line":97,"column":8,"nodeType":"100","endLine":97,"endColumn":10,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'checkLoggedIn', 'history', and 'updateData'. Either include them or remove the dependency array.",["113"],["114"],"React Hook useEffect has missing dependencies: 'history' and 'updateData'. Either include them or remove the dependency array.",["115"],["116"],["117"],["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"124","fix":"125"},{"desc":"124","fix":"126"},{"desc":"119","fix":"127"},{"desc":"124","fix":"128"},"Update the dependencies array to be: [history]",{"range":"129","text":"130"},"Update the dependencies array to be: [checkLoggedIn, history, updateData]",{"range":"131","text":"132"},{"range":"133","text":"132"},"Update the dependencies array to be: [history, updateData]",{"range":"134","text":"135"},{"range":"136","text":"135"},{"range":"137","text":"130"},{"range":"138","text":"135"},[1564,1566],"[history]",[2428,2430],"[checkLoggedIn, history, updateData]",[3821,3823],[1960,1962],"[history, updateData]",[4019,4021],[1761,1763],[3948,3950]]