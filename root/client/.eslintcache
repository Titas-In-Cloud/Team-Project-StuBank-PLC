[{"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js":"1","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js":"2","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js":"3","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js":"4","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\AboutUs.js":"5","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Features.js":"6","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js":"7","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js":"8","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js":"9","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js":"10","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js":"11","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js":"12","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js":"13","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js":"14","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js":"15","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js":"16","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js":"17","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js":"18","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js":"19","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js":"20","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js":"21","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRoute.js":"22","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\UnprotectedRoute.js":"23","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRouteAdmin.js":"24"},{"size":467,"mtime":1611520197207,"results":"25","hashOfConfig":"26"},{"size":4467,"mtime":1611800475766,"results":"27","hashOfConfig":"26"},{"size":75,"mtime":1611520197206,"results":"28","hashOfConfig":"26"},{"size":990,"mtime":1611659407752,"results":"29","hashOfConfig":"26"},{"size":390,"mtime":1611520197161,"results":"30","hashOfConfig":"26"},{"size":389,"mtime":1611520197166,"results":"31","hashOfConfig":"26"},{"size":379,"mtime":1611520197164,"results":"32","hashOfConfig":"26"},{"size":6942,"mtime":1611520197168,"results":"33","hashOfConfig":"26"},{"size":1504,"mtime":1611523734940,"results":"34","hashOfConfig":"26"},{"size":4936,"mtime":1611763839198,"results":"35","hashOfConfig":"26"},{"size":3834,"mtime":1611788983912,"results":"36","hashOfConfig":"26"},{"size":3312,"mtime":1611757548112,"results":"37","hashOfConfig":"26"},{"size":4868,"mtime":1611800858113,"results":"38","hashOfConfig":"26"},{"size":6092,"mtime":1611798480673,"results":"39","hashOfConfig":"26"},{"size":10344,"mtime":1611796039400,"results":"40","hashOfConfig":"26"},{"size":3121,"mtime":1611743235159,"results":"41","hashOfConfig":"26"},{"size":9831,"mtime":1611832220457,"results":"42","hashOfConfig":"26"},{"size":4523,"mtime":1611798545437,"results":"43","hashOfConfig":"26"},{"size":6724,"mtime":1611793126583,"results":"44","hashOfConfig":"26"},{"size":2282,"mtime":1611659407739,"results":"45","hashOfConfig":"26"},{"size":322,"mtime":1611520197203,"results":"46","hashOfConfig":"26"},{"size":478,"mtime":1611794392585,"results":"47","hashOfConfig":"26"},{"size":445,"mtime":1611785147356,"results":"48","hashOfConfig":"26"},{"size":478,"mtime":1611788750469,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1ulu4iz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\index.js",[],["106","107"],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\App.js",["108"],"import React, {useState, useEffect} from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport { Home, Features, AboutUs, FAQ, Login, Register } from \"./components\";\r\nimport { Overview, Transactions, Account, Cards, Settings } from \"./components\";\r\nimport { Users, NewAdmin } from \"./components\";\r\nimport UserContext from \"./context/UserContext\";\r\nimport Axios from \"axios\";\r\nimport ProtectedRoute from \"./ProtectedRoute\";\r\nimport ProtectedRouteAdmin from \"./ProtectedRouteAdmin\";\r\n\r\nexport default function App() {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    console.log(\"auth status: \" + isAuthenticated)\r\n\r\n        const checkAuth = async () => {\r\n            const token = localStorage.getItem('auth-token');\r\n            const request = Axios.create({\r\n                headers: {\r\n                    \"x-auth-token\": token\r\n                }\r\n            });\r\n            await request.post('http://localhost:5000/users/tokenIsValid')\r\n                .then( res => {\r\n                    console.log(\"response: \" + res.data)\r\n                if (res.data) {\r\n                setIsAuthenticated(true);\r\n            }\r\n                else{\r\n                    setIsAuthenticated(false);\r\n            }\r\n        })\r\n        }\r\n    const [userData, setUserData] = useState({\r\n        token: undefined,\r\n        user: undefined,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const checkLoggedIn = async () => {\r\n            let token = localStorage.getItem(\"auth-token\");\r\n            if (token === null) {\r\n                localStorage.setItem(\"auth-token\", \"\");\r\n                token = \"\";\r\n            }\r\n            const tokenRes = await Axios.post(\"http://localhost:5000/users/tokenIsValid\",\r\n                null,\r\n                { headers: {\"x-auth-token\": token} }\r\n            );\r\n            if (tokenRes.data) {\r\n                const userRes = await Axios.get(\"http://localhost:5000/users/\", {\r\n                    headers: { \"x-auth-token\": token },\r\n                });\r\n                setUserData({\r\n                    token,\r\n                    user: userRes.data,\r\n                });\r\n            }\r\n        };\r\n        checkLoggedIn();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <UserContext.Provider value={{userData, setUserData}}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={() => <Home />}/>\r\n                        <Route exact path=\"/home\" component={() => <Home />} onEnter={checkAuth()} auth={isAuthenticated} />\r\n                        <Route exact path=\"/features\" component={() => <Features/>} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <Route exact path=\"/about_us\" component={() => <AboutUs />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <Route exact path=\"/FAQ\" component={() => <FAQ />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <Route exact path=\"/login\" component={() => <Login />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <Route exact path=\"/register\" component={() => <Register />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRoute path='/overview' component={() => <Overview />} onEnter={checkAuth()} auth={isAuthenticated} />\r\n                        <ProtectedRoute exact path=\"/transactions\" component={() => <Transactions />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRoute exact path=\"/account\" component={() => <Account />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRoute exact path=\"/cards\" component={() => <Cards />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRoute exact path=\"/settings\" component={() => <Settings />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRouteAdmin exact path=\"/users\" component={() => <Users />} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <ProtectedRouteAdmin exact path=\"/create_admin\" component={() => <NewAdmin/>} onEnter={checkAuth()} auth={isAuthenticated}/>\r\n                        <Route path = \"*\" component={() => \"404 NOT FOUND\"}/>\r\n                    </Switch>\r\n                </UserContext.Provider>\r\n            </Router>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\context\\UserContext.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\index.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\AboutUs.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Features.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\FAQ.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Home.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Overview.js",["109"],"import React, {useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport qrcode from \"qrcode\";\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\n\r\nexport default function Overview() {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n        const [balanceGBP] = useState(user.accountBalanceGBP.data);\r\n        const [balanceUSD] = useState(user.accountBalanceUSD.data);\r\n        const [balanceEUR] = useState(user.accountBalanceEUR.data);\r\n        const [qrCodeImg, setQrCodeImg] = useState();\r\n\r\n        //Converts totpSecret into a string to display the qr code so it can be scanned with google auth (if user logged in)\r\n        if(\r\n    !qrCodeImg && user\r\n)\r\n    {\r\n        let totpSecret = user.totpSecret;\r\n        qrcode.toDataURL(totpSecret.otpauth_url, function (err, data) {\r\n            setQrCodeImg(data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar/>\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box-left\">\r\n                    <h1>Information</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 20, paddingTop: 10, paddingBottom: 15}}>\r\n                        Welcome, {user.firstName.data} {user.lastName.data}!</p>\r\n                    <p style={{color: \"black\", fontSize: 16, paddingLeft: 25, paddingRight: 25, paddingBottom: 5}}>\r\n                        Please, scan this QR code with Google Authenticator app on your smartphone to protect\r\n                        your account with 2 Factor Authentication.</p>\r\n                    <p style={{color: \"#FF5454\", fontSize: 14, paddingLeft: 30, paddingRight: 25}}>\r\n                        You will not be able to login without it!\r\n                    </p>\r\n                    <div style={{paddingLeft: 120}}>\r\n                        <img style={{height: 300}} src={qrCodeImg} alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"small-bank-box-right\">\r\n                    <h1>Account Balance</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 15, paddingBottom: 10}}>\r\n                        Your total GBP balance: £{Number(balanceGBP).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total USD balance: ${Number(balanceUSD).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total EUR balance: €{Number(balanceEUR).toFixed(2)}</p>\r\n                    <h1 style={{paddingTop: 25}}>Your Most Recent Transactions</h1>\r\n                    <div className=\"table\">\r\n                        <TableContainer component={Paper}>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"font-headings\">Date</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount In</TableCell>\r\n                                        <TableCell className=\"font-headings\">Amount Out</TableCell>\r\n                                        <TableCell className=\"font-headings\">Account</TableCell>\r\n                                        <TableCell className=\"font-headings\">Balance</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {user.transactions.reverse().slice(0, 6).map((transaction) => (\r\n                                        <TableRow key={transaction.date}>\r\n                                            <TableCell component=\"th\" scope=\"row\" className=\"font-information\">\r\n                                                {transaction.date}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountIn}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.amountOut}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.account}</TableCell>\r\n                                            <TableCell className=\"font-information\">{transaction.balance}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Cards.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\NavigationBar.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Login.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\home\\pages\\Register.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Account.js",["110"],"import React, {useEffect, useState} from \"react\";\r\nimport {MenuItem, Select} from \"@material-ui/core\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\"\r\nimport Axios from \"axios\";\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport { MainNavigationBar } from \"../../\";\r\n\r\nexport default function Account () {\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n    const [amountTransfer, setAmountTransfer] = useState();\r\n    const [amountConvert, setAmountConvert] = useState();\r\n    const [errorTransfer, setErrorTransfer] = useState();\r\n    const [showTransfer, setShowTransfer] = useState(false);\r\n    const [errorConvert, setErrorConvert] = useState();\r\n    const [showConvert, setShowConvert] = useState(false);\r\n    const [balanceGBP, setBalanceGBP] = useState(user.accountBalanceGBP.data);\r\n    const [balanceUSD, setBalanceUSD] = useState(user.accountBalanceUSD.data);\r\n    const [balanceEUR, setBalanceEUR] = useState(user.accountBalanceEUR.data);\r\n    const [recipient, setRecipient] = useState({label: '', value: ''});\r\n    const [currency, setCurrency] = useState('£');\r\n    const [currencyTo, setCurrencyTo] = useState('£');\r\n    const [currencyFrom, setCurrencyFrom] = useState('£');\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setBalanceGBP(user.accountBalanceGBP.data)\r\n            setBalanceUSD(user.accountBalanceUSD.data)\r\n            setBalanceEUR(user.accountBalanceEUR.data)\r\n            setShowTransfer(false)\r\n            setShowConvert(false)\r\n            setErrorTransfer(undefined)\r\n            setErrorConvert(undefined)\r\n            setRecipient({label: '', value: ''})\r\n            setAmountTransfer('')\r\n            setAmountConvert('')\r\n            setCurrency('£')\r\n            setCurrencyTo('£')\r\n            setCurrencyFrom('£')\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorTransfer(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    const recipientChange = (input) => {\r\n        setRecipient(input)\r\n    }\r\n    const currencyChange = (input) => {\r\n        setCurrency(input.target.value)\r\n    }\r\n    const currencyFromChange = (input) => {\r\n        setCurrencyFrom(input.target.value)\r\n    }\r\n    const currencyToChange = (input) => {\r\n        setCurrencyTo(input.target.value)\r\n    }\r\n\r\n    async function submitTransfer(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const data = {payerID: user.personalID, payeeID: recipient, amount: amountTransfer, currency}\r\n            await Axios.post(\"http://localhost:5000/users/transfer\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            console.log(err)\r\n            err.response.data.msg && setErrorTransfer(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function submitConvert(e) {\r\n        e.preventDefault();\r\n        try {\r\n            const data = {personalID: user.personalID, amount: amountConvert, to: currencyTo, from: currencyFrom}\r\n            await Axios.post(\"http://localhost:5000/users/convert\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            console.log(err)\r\n            err.response.data.msg && setErrorConvert(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <MainNavigationBar/>\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <h1>Account Balance</h1>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 15, paddingBottom: 10}}>\r\n                        Your total GBP balance: £{Number(balanceGBP).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total USD balance: ${Number(balanceUSD).toFixed(2)}</p>\r\n                    <p style={{color: \"black\", fontSize: 18, paddingLeft: 30, paddingTop: 5, paddingBottom: 10}}>\r\n                        Your total EUR balance: €{Number(balanceEUR).toFixed(2)}</p>\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 40, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() => {\r\n                            setShowTransfer(!showTransfer)\r\n                        }}>New Transfer</btn>\r\n                    </div>\r\n                    {showTransfer && (\r\n                        <form className=\"form-account\" onSubmit={submitTransfer}>\r\n                            <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                                {errorTransfer && (<ErrorNotice message={errorTransfer}\r\n                                                                clearError={() => setErrorTransfer(undefined)}/>)}\r\n                            </div>\r\n                            <label>Payee Personal ID: </label>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <div style={{fontSize: 16, paddingBottom: 10}}>\r\n                                    <CreatableSelect\r\n                                        options={user.recipients}\r\n                                        onChange={recipientChange}\r\n                                    />\r\n                                </div>\r\n                                <label>Amount and Currency:</label>\r\n                                <div style={{paddingTop: 5}}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"Amount\"\r\n                                        style={{width: 200, height: 25, fontSize: 16}}\r\n                                        onChange={(e) => setAmountTransfer(e.target.value)}\r\n                                    />\r\n                                    <Select\r\n                                        defaultValue={'£'}\r\n                                        onChange={currencyChange}\r\n                                        style={{fontSize: 14}}\r\n                                    >\r\n                                        <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                        <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                        <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                    </Select>\r\n                                    <div style={{paddingTop: 10}}>\r\n                                        <input className=\"button-account\" style={{width: 110, fontSize: 12}} type=\"submit\" value=\"Submit\"/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>)}\r\n                    <div className=\"inputBox\" style={{paddingLeft: 20, paddingTop: 30, paddingBottom: 20}}>\r\n                        <btn className=\"button-account\" disableElevation={true} onClick={() => {\r\n                            setShowConvert(!showConvert)\r\n                        }}>Convert Currencies</btn>\r\n                    </div>\r\n                    {showConvert && (\r\n                        <form className=\"form-account\" onSubmit={submitConvert}>\r\n                            <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 5}}>\r\n                                {errorConvert && (<ErrorNotice message={errorConvert}\r\n                                                               clearError={() => setErrorConvert(undefined)}/>)}\r\n                            </div>\r\n                            <div>\r\n                                <label>Currency From: </label>\r\n                                <Select\r\n                                    defaultValue={'£'}\r\n                                    onChange={currencyFromChange}\r\n                                    style={{fontSize: 14}}\r\n                                >\r\n                                    <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <label>Currency To: </label>\r\n                                <Select\r\n                                    defaultValue={'£'}\r\n                                    onChange={currencyToChange}\r\n                                    style={{fontSize: 14}}\r\n                                >\r\n                                    <MenuItem style={{fontSize: 14}} value={'£'}>GBP</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'$'}>USD</MenuItem>\r\n                                    <MenuItem style={{fontSize: 14}} value={'€'}>EUR</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div style={{paddingTop: 10}}>\r\n                                <label>Amount:  </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"Amount\"\r\n                                    style={{width: 200, height: 25, fontSize: 16}}\r\n                                    onChange={(e) => setAmountConvert(e.target.value)}\r\n                                />\r\n                                <div style={{paddingTop: 10}}>\r\n                                    <input className=\"button-account\" style={{width: 110, fontSize: 12}}\r\n                                           type=\"submit\" value=\"Submit\"/>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    )\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Transactions.js",["111"],"import React, {useEffect, useState} from \"react\";\r\nimport { MainNavigationBar } from \"../../\";\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\n\r\nexport default function Transactions () {\r\n    const [showStatement, setShowStatement] = useState(false)\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"))\r\n\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: user.personalID})\r\n            user = newData.data\r\n            setShowStatement(false)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(user))\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"main-background\">\r\n            <MainNavigationBar />\r\n            <section className=\"main-background\">\r\n                <div className=\"centered-text-default\">\r\n                    <h1>Transactions</h1>\r\n                    <div>\r\n                    <Button variant={\"contained\"} disableElevation={true} onClick={() => {\r\n                        setShowStatement(!showStatement)\r\n                    }}>Show Statement</Button>\r\n                </div>\r\n                    {showStatement &&\r\n                    <TableContainer component={Paper}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Date</TableCell>\r\n                                    <TableCell>Amount In</TableCell>\r\n                                    <TableCell>Amount Out</TableCell>\r\n                                    <TableCell>Account</TableCell>\r\n                                    <TableCell>Balance</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {user.transactions.map((transaction) => (\r\n                                    <TableRow key={transaction.date}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {transaction.date}\r\n                                        </TableCell>\r\n                                        <TableCell>{transaction.amountIn}</TableCell>\r\n                                        <TableCell>{transaction.amountOut}</TableCell>\r\n                                        <TableCell>{transaction.account}</TableCell>\r\n                                        <TableCell>{transaction.balance}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\main\\pages\\Settings.js",["112","113","114","115"],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\NewAdmin.js",["116","117"],"import React, {useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport Axios from \"axios\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function NewAdmin () {\r\n    const [email, setEmail] = useState(undefined);\r\n    const [firstName, setFirstName] = useState(undefined);\r\n    const [lastName, setLastName] = useState(undefined);\r\n    const [password, setPassword] = useState(undefined);\r\n    const [passwordCheck, setPasswordCheck] = useState(undefined);\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    const [phoneNum, setPhoneNum] = useState(undefined);\r\n    const role = \"admin\";\r\n    const [error, setError] = useState();\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const newUser = { email, firstName, lastName, password, passwordCheck, personalID, phoneNum, role };\r\n            await Axios.post(\"http://localhost:5000/users/register\", newUser)\r\n            alert(\"Admin account with personal id \" + personalID + \" successfully created\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"small-bank-box\">\r\n                    <div style={{fontSize: 14, color: \"#FF5454\", paddingLeft: 10, paddingBottom: 10}}>\r\n                        {error && (\r\n                            <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                        )}\r\n                    </div>\r\n                    <form onSubmit={submit}>\r\n                        <label htmlFor=\"register-first-name\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"First Name(s)\" id=\"register-first-name\"\r\n                                   onChange={(e) => setFirstName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-last-name\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"Last Name\" id=\"register-last-name\"\r\n                                   onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-phone-num\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"tel\" placeholder=\"Telephone Number\" id=\"register-phone-num\"\r\n                                   onChange={(e) => setPhoneNum(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-email\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"email\" placeholder=\"Email Address\" id=\"register-email\"\r\n                                   onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-personal-id\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"text\" placeholder=\"User ID\" id=\"register-password\"\r\n                                   onChange={(e) => setPersonalID(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <label htmlFor=\"register-password\"/>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"password\" placeholder=\"Password\" id=\"register-password\"\r\n                                   onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"inputBox\">\r\n                            <input type=\"password\" placeholder=\"Repeat Password\"\r\n                                   onChange={(e) => setPasswordCheck(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"inputBox\">\r\n                            <input className=\"button\" type=\"submit\" value=\"Register\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\pages\\Users.js",["118","119","120"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport { AdminNavigationBar } from \"../../\";\r\nimport Axios from \"axios\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport ErrorNotice from \"../../misc/ErrorNotice\";\r\n\r\nexport default function Users () {\r\n    const {userData, setUserData} = useContext(UserContext);\r\n    let userDataToAmend = \"\";\r\n    //Sets user data to the logged in admin user if it is null to prevent null pointer errors\r\n    if (!userDataToAmend) {\r\n        userDataToAmend = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n    }\r\n    const [personalID, setPersonalID] = useState(undefined);\r\n    const [showAmend, setShowAmend] = useState(false);\r\n    const [errorAmend, setErrorAmend] = useState();\r\n    const [email, setEmail] = useState(userDataToAmend.email.data);\r\n    const [firstName, setFirstName] = useState(userDataToAmend.firstName.data);\r\n    const [lastName, setLastName] = useState(userDataToAmend.lastName.data);\r\n    const [phoneNum, setPhoneNum] = useState(userDataToAmend.phoneNum.data);\r\n    const [accountBalanceGBP, setBalanceGBP] = useState(userDataToAmend.accountBalanceGBP.data);\r\n    const [accountBalanceUSD, setBalanceUSD] = useState(userDataToAmend.accountBalanceUSD.data);\r\n    const [accountBalanceEUR, setBalanceEUR] = useState(userDataToAmend.accountBalanceEUR.data);\r\n    async function updateData() {\r\n        try {\r\n            const newData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = newData.data\r\n            setShowAmend(false)\r\n            setEmail(userDataToAmend.email.data)\r\n            setFirstName(userDataToAmend.firstName.data)\r\n            setLastName(userDataToAmend.lastName.data)\r\n            setPhoneNum(userDataToAmend.phoneNum.data)\r\n            setBalanceGBP(userDataToAmend.accountBalanceGBP.data)\r\n            setBalanceUSD(userDataToAmend.accountBalanceUSD.data)\r\n            setBalanceEUR(userDataToAmend.accountBalanceEUR.data)\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(userDataToAmend))\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    async function getUserData() {\r\n        try {\r\n            const userData = await Axios.post(\"http://localhost:5000/users/updateData\", {PID: personalID})\r\n            userDataToAmend = userData.data\r\n            sessionStorage.setItem(\"userData\", JSON.stringify(userDataToAmend))\r\n            setShowAmend(!showAmend)\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, []);\r\n\r\n    async function submitAmend(e){\r\n        e.preventDefault()\r\n        try {\r\n            const data = {email, phoneNum, firstName, lastName, personalID, accountBalanceGBP, accountBalanceUSD,\r\n                accountBalanceEUR}\r\n            await Axios.post(\"http://localhost:5000/users/amendDetails\", data)\r\n            await updateData()\r\n        } catch (err) {\r\n            err.response.data.msg && setErrorAmend(err.response.data.msg)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <AdminNavigationBar />\r\n            <div className=\"main-background\">\r\n                <div className=\"big-bank-box\">\r\n                    <h1>Users</h1>\r\n                    <label htmlFor=\"personal-id\">Personal ID</label>\r\n                    <input\r\n                        id=\"personal-id\"\r\n                        type=\"text\"\r\n                        placeholder=\"e.g 12345678912\"\r\n                        onChange={(e) => setPersonalID(e.target.value)}\r\n                    />\r\n                    <Button variant={\"contained\"} disableElevation={true} onClick={getUserData} >Amend Details</Button>\r\n                {showAmend &&\r\n                <form className=\"form\" onSubmit={submitAmend}>\r\n                    {errorAmend && (<ErrorNotice message={errorAmend} clearError={() => setErrorAmend(undefined)}/>)}\r\n                    <label htmlFor=\"register-email\">Email</label>\r\n                    <input\r\n                        id=\"register-email\"\r\n                        type=\"email\"\r\n                        defaultValue={userDataToAmend.email.data}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-first-na   me\">First name</label>\r\n                    <input\r\n                        id=\"register-first-name\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.firstName.data}\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-last-name\">Last name</label>\r\n                    <input\r\n                        id=\"register-last-name\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.lastName.data}\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"register-phone-num\">Phone Num</label>\r\n                    <input\r\n                        id=\"register-phone-num\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.phoneNum.data}\r\n                        onChange={(e) => setPhoneNum(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"gbp-balance\">GBP Balance</label>\r\n                    <input\r\n                        id=\"gbp-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceGBP.data}\r\n                        onChange={(e) => setBalanceGBP(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"usd-balance\">USD Balance</label>\r\n                    <input\r\n                        id=\"usd-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceUSD.data}\r\n                        onChange={(e) => setBalanceUSD(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"eur-balance\">EUR Balance</label>\r\n                    <input\r\n                        id=\"eur-balance\"\r\n                        type=\"text\"\r\n                        defaultValue={userDataToAmend.accountBalanceEUR.data}\r\n                        onChange={(e) => setBalanceEUR(e.target.value)}\r\n                    />\r\n                    <input type=\"submit\" value=\"Amend\"/>\r\n                </form>}\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\admin\\NavigationBar.js",["121"],"import React, {useContext} from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport LogoutLogo from \"../images/logout-logo.png\";\r\nimport BankLogo from \"../images/bank-logo.png\";\r\nimport UsersLogo from \"../images/multiple-users-logo.png\";\r\nimport AdminLogo from \"../images/admin-logo.png\";\r\nimport UserContext from \"../../context/UserContext\";\r\n\r\nfunction NavigationBar(){\r\n    let user = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n\r\n    const {setUserData} = useContext(UserContext);\r\n\r\n    // This removes the authentication token from the user data and also the local storage when the user logs out\r\n    const logout = () => {\r\n        setUserData({\r\n            token: undefined,\r\n            user: undefined\r\n        })\r\n        sessionStorage.clear()\r\n        localStorage.clear()\r\n    }\r\n\r\n    return (\r\n        <div className=\"top-bar\">\r\n            <div className=\"sidebar\">\r\n                <div className=\"nav-brand\">\r\n                    <Link to=\"/users\">\r\n                        <img className=\"main-img\" src={BankLogo} alt=\"\"/>\r\n                    </Link>\r\n                </div>\r\n                <ul className=\"sidebar-list\">\r\n                    <li className=\"row\">\r\n                        <Link className=\"link\" to=\"/users\">\r\n                            <img className=\"img\" src={UsersLogo} alt=\"\"/>\r\n                            <p>Users</p>\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"row\">\r\n                        <Link className=\"link\" to=\"/create_admin\">\r\n                            <img className=\"img\" src={AdminLogo} alt=\"\"/>\r\n                            <p>New Admin</p>\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"text\">\r\n                    {/*<h2 className=\"admin\">Admin ID: {user.personalID}</h2>*/}\r\n                </div>\r\n            </div>\r\n            <div className=\"button\">\r\n                <Link to=\"/login\" onClick={logout}>\r\n                    <img className=\"image-logout\" src={LogoutLogo} alt=\"Logout\"/>\r\n                    <p style={{color: \"#ff1b1b\" }}>Logout</p>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavigationBar);","C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\components\\misc\\ErrorNotice.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRoute.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\UnprotectedRoute.js",[],"C:\\Users\\Travis\\WebstormProjects\\stubank-plc-v3\\root\\client\\src\\ProtectedRouteAdmin.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":2,"column":50,"nodeType":"128","messageId":"129","endLine":2,"endColumn":58},{"ruleId":"126","severity":1,"message":"130","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":13},{"ruleId":"131","severity":1,"message":"132","line":49,"column":8,"nodeType":"133","endLine":49,"endColumn":10,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"132","line":22,"column":8,"nodeType":"133","endLine":22,"endColumn":10,"suggestions":"135"},{"ruleId":"126","severity":1,"message":"136","line":62,"column":17,"nodeType":"128","messageId":"129","endLine":62,"endColumn":34},{"ruleId":"126","severity":1,"message":"137","line":63,"column":17,"nodeType":"128","messageId":"129","endLine":63,"endColumn":34},{"ruleId":"126","severity":1,"message":"138","line":64,"column":17,"nodeType":"128","messageId":"129","endLine":64,"endColumn":34},{"ruleId":"131","severity":1,"message":"132","line":73,"column":8,"nodeType":"133","endLine":73,"endColumn":10,"suggestions":"139"},{"ruleId":"126","severity":1,"message":"140","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":19},{"ruleId":"126","severity":1,"message":"141","line":6,"column":9,"nodeType":"128","messageId":"129","endLine":6,"endColumn":19},{"ruleId":"126","severity":1,"message":"142","line":9,"column":12,"nodeType":"128","messageId":"129","endLine":9,"endColumn":20},{"ruleId":"126","severity":1,"message":"143","line":9,"column":22,"nodeType":"128","messageId":"129","endLine":9,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":56,"column":8,"nodeType":"133","endLine":56,"endColumn":10,"suggestions":"144"},{"ruleId":"126","severity":1,"message":"145","line":11,"column":9,"nodeType":"128","messageId":"129","endLine":11,"endColumn":13},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.","ArrayExpression",["148"],["149"],"'accountBalanceGBP' is assigned a value but never used.","'accountBalanceEUR' is assigned a value but never used.","'accountBalanceUSD' is assigned a value but never used.",["150"],"'UserContext' is defined but never used.","'useHistory' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.",["151"],"'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},{"desc":"152","fix":"155"},{"desc":"152","fix":"156"},"Update the dependencies array to be: [updateData]",{"range":"157","text":"158"},{"range":"159","text":"158"},{"range":"160","text":"158"},{"range":"161","text":"158"},[2202,2204],"[updateData]",[813,815],[3046,3048],[2748,2750]]